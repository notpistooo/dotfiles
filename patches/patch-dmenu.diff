diff -uNr dmenu/config.def.h suckless/dmenu/config.def.h
--- dmenu/config.def.h	2025-02-07 09:57:49.386519835 +0100
+++ suckless/dmenu/config.def.h	2025-01-31 15:08:27.099546078 +0100
@@ -1,23 +1,32 @@
 /* See LICENSE file for copyright and license details. */
 /* Default settings; can be overriden by command line. */
 
-static int topbar = 1;                      /* -b  option; if 0, dmenu appears at bottom     */
+#include "../colors.h"
+
+static int topbar        = 1;        /* -b   option; if 0, dmenu appears at bottom     */
+static int middlebar     = 1;        /* -mb  option; if 0, dmenu appears at topbar position     */
+static const int vertpad = 15;       /* vertical padding of dmenu */
+static const int sidepad = 15;       /* horizontal padding of dmenu */
 /* -fn option overrides fonts[0]; default X11 font or font set */
 static const char *fonts[] = {
-	"monospace:size=10"
+	"CaskaydiaCove Nerd Font Mono:size=13"
 };
 static const char *prompt      = NULL;      /* -p  option; prompt to the left of input field */
 static const char *colors[SchemeLast][2] = {
-	/*     fg         bg       */
-	[SchemeNorm] = { "#bbbbbb", "#222222" },
-	[SchemeSel] = { "#eeeeee", "#005577" },
-	[SchemeOut] = { "#000000", "#00ffff" },
+		/*       fg  bg       */
+	[SchemeNorm] = { fg, bg },
+	[SchemeSel]  = { bg, mn },
+	[SchemeOut]  = { fg, bg },
 };
 /* -l option; if nonzero, dmenu uses vertical list with given number of lines */
-static unsigned int lines      = 0;
+static unsigned int lines        = 0;
+static unsigned int middle_lines = 20;
 
 /*
  * Characters not considered part of a word while deleting words
  * for example: " /?\"&[]"
  */
 static const char worddelimiters[] = " ";
+
+/* Size of the window border */
+static unsigned int border_width = 2;
diff -uNr dmenu/dmenu.c suckless/dmenu/dmenu.c
--- dmenu/dmenu.c	2025-02-07 09:57:49.386519835 +0100
+++ suckless/dmenu/dmenu.c	2025-01-31 16:14:26.535932886 +0100
@@ -38,6 +38,8 @@
 static int bh, mw, mh;
 static int inputw = 0, promptw;
 static int lrpad; /* sum of left and right padding */
+static int vp;    /* vertical padding for dmenu */
+static int sp;    /* side padding for dmenu */
 static size_t cursor;
 static struct item *items = NULL;
 static struct item *matches, *matchend;
@@ -634,7 +636,13 @@
 
 	/* calculate menu geometry */
 	bh = drw->fonts->h + 2;
-	lines = MAX(lines, 0);
+	sp = sidepad;
+	vp = (topbar == 1) ? vertpad : - vertpad;
+	if (middlebar == 1) {
+		lines = MAX(middle_lines, 0);
+	} else {
+		lines = MAX(lines, 0);
+	}
 	mh = (lines + 1) * bh;
 #ifdef XINERAMA
 	i = 0;
@@ -662,9 +670,15 @@
 				if (INTERSECT(x, y, 1, 1, info[i]) != 0)
 					break;
 
-		x = info[i].x_org;
-		y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
-		mw = info[i].width;
+		if (middlebar == 1) {
+			x = info[i].x_org + info[i].width * 30 / 100;
+			y = info[i].y_org + (info[i].height / 2 - mh / 2);
+			mw = info[i].width * 40 / 100;
+		} else {
+			x = info[i].x_org + sp;
+			y = info[i].y_org + (topbar ? vp : info[i].height - mh + vp);
+			mw = info[i].width - 2*sp;
+		}
 		XFree(info);
 	} else
 #endif
@@ -672,9 +686,15 @@
 		if (!XGetWindowAttributes(dpy, parentwin, &wa))
 			die("could not get embedding window attributes: 0x%lx",
 			    parentwin);
-		x = 0;
-		y = topbar ? 0 : wa.height - mh;
-		mw = wa.width;
+		if (middlebar == 1) {
+			x = wa.width * 30 / 100;
+			y = wa.height / 2 - mh / 2;
+			mw = wa.width * 40 / 100;
+		} else {
+			x = sp;
+			y = topbar ? vp : wa.height - mh + vp;
+			mw = wa.width - 2*sp;
+		}
 	}
 	promptw = (prompt && *prompt) ? TEXTW(prompt) - lrpad / 4 : 0;
 	inputw = mw / 3; /* input width: ~33% of monitor width */
@@ -684,9 +704,11 @@
 	swa.override_redirect = True;
 	swa.background_pixel = scheme[SchemeNorm][ColBg].pixel;
 	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
-	win = XCreateWindow(dpy, root, x, y, mw, mh, 0,
+	win = XCreateWindow(dpy, root, x, y, mw, mh, border_width,
 	                    CopyFromParent, CopyFromParent, CopyFromParent,
 	                    CWOverrideRedirect | CWBackPixel | CWEventMask, &swa);
+	if (border_width)
+		XSetWindowBorder(dpy, win, scheme[SchemeSel][ColBg].pixel);
 	XSetClassHint(dpy, win, &ch);
 
 	/* input methods */
@@ -731,6 +753,8 @@
 			exit(0);
 		} else if (!strcmp(argv[i], "-b")) /* appears at the bottom of the screen */
 			topbar = 0;
+		else if (!strcmp(argv[i], "-mb")) /* appears at the topbar position */
+			middlebar = 0;
 		else if (!strcmp(argv[i], "-f"))   /* grabs keyboard before reading stdin */
 			fast = 1;
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
@@ -757,6 +781,8 @@
 			colors[SchemeSel][ColFg] = argv[++i];
 		else if (!strcmp(argv[i], "-w"))   /* embedding window id */
 			embed = argv[++i];
+		else if (!strcmp(argv[i], "-bw"))
+			border_width = atoi(argv[++i]); /* border width */
 		else
 			usage();
 
